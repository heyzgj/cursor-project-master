---
description: 
globs: 
alwaysApply: true
---
---
description: PRD → hierarchical work-breakdown with automatic self-checks
alwaysApply: true
---

# ───────────── 110 · DECOMPOSER ─────────────
A one-shot, prompt-only task-decomposer.  
It turns the current project docs into a three-level Work-Breakdown Structure (WBS) and emits a
machine-readable plan that **100-engine** will consume.

### When to run
* `plan.json` **is missing**, **or**  
* the user explicitly writes “re-plan”, “re-decompose”, etc.

---

## 1 Collect input  
Concatenate every file under:

```

/docs/**/\*
/project/req/**/\*       # optional requirements folder

```

into a single string `<DOCS>` (preserve headings, lists, code).

---

## 2 Prompt sent to the LLM

<START_LLM_PROMPT>
**Role**  
You are a **Principal Technical Program Manager** with fifteen years of shipping large
SaaS products.  
Your specialty is breaking vague product briefs into actionable,
dependency-aware epics, tasks and subtasks that software agents can
execute autonomously.

**Mission**  
Convert the provided project documentation into a precise JSON work-plan.
The output will drive an autonomous agent that expects well-scoped work items.

**Output schema**  *(return JSON **only**, no prose)*  
```jsonc
{
  "epics": [
    {
      "id": "E-1",
      "title": "ShortVerbNounPhrase",
      "motivation": "why this epic matters (≤ 25 words)",
      "children": ["T-1", "T-2"]
    }
  ],
  "tasks": [
    {
      "id": "T-1",
      "epic": "E-1",
      "title": "ImplementX",
      "description": "what + why (≤ 120 chars)",
      "criteria": ["AC 1", "AC 2"],
      "type": "feature | bug | test | refactor | design | research",
      "dependencies": ["T-0"],
      "effort": 1,          /* Fibonacci points 1|2|3 */
      "ui_review": true     /* true if any UI/layout touched */
    }
  ],
  "subtasks": [
    {
      "id": "S-1",
      "parent": "T-1",
      "title": "WriteUnitTest",
      "criteria": ["covers edge cases"]
    }
  ]
}
```

**Granularity rules**

* **Epic** ≈ 1 – 2 calendar weeks, **Task** ≈ 1 – 2 developer-days, **Subtask** ≤ 4 hours.
* No timestamps, durations or dates.
* Maximum seven children per node; split if larger.
* IDs must be unique; maintain simple incremental numbering (E-1 …, T-1 …, S-1 …).

**Quality / consistency checks** (perform **before** responding)

1. Every acceptance-criterion in `<DOCS>` is covered by at least one task or subtask.
2. No orphan nodes: each `task.epic` and `subtask.parent` references an existing parent.
3. Dependency graph is acyclic.
4. No task’s `description` > 120 chars; no `criteria` list longer than 5 items.
   If violated, **split the task** and re-check.
5. Total subtasks **≤ 300**. Otherwise split epics or summarise non-critical work.

Return the final JSON **only**.
\<END\_LLM\_PROMPT>

---

## 3 Post-processing

1. Save the model’s response to `/project/plan.json`.
2. For every `task` and `subtask` create a file in
   `/project/tasks/todo/` using the **Task Template** (`task.md`).
   *If `ui_review: true` prepend the file with the line `design-stop: pending`.*
3. `git add` newly created files and commit:

   ```bash
   git commit -m "chore(plan): initial decomposition via 110-decomposer"
   ```
4. Hand control back to **100-engine** (it will move the first task into
   `in_progress/` and start the TDD loop).